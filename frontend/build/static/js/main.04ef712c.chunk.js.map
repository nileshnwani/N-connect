{"version":3,"sources":["Context/ChatProvider.js","components/Authentication/Login.js","components/Authentication/Signup.js","Pages/Homepage.js","components/SingleChat.js","config/ChatLogics.js","components/miscellaneous/ProfileModal.js","components/ScrollableChat.js","components/userAvatar/UserBadgeItem.js","components/userAvatar/UserListItem.js","components/miscellaneous/UpdateGroupChatModal.js","components/Chatbox.js","components/ChatLoading.js","components/miscellaneous/GroupChatModal.js","components/MyChats.js","components/miscellaneous/SideDrawer.js","Pages/Chatpage.js","App.js","reportWebVitals.js","index.js"],"names":["ChatContext","createContext","ChatState","useContext","ChatProvider","children","useState","selectedChat","setSelectedChat","user","setUser","notification","setNotification","chats","setChats","history","useHistory","useEffect","userInfo","JSON","parse","localStorage","getItem","push","Provider","value","Login","show","setShow","toast","useToast","email","setEmail","password","setPassword","loading","setLoading","submitHandler","a","title","status","duration","isClosable","position","config","headers","axios","post","data","setItem","stringify","description","response","message","mb","textAlign","fontSize","color","spacing","id","isRequired","type","placeholder","onChange","e","target","borderRadius","focusBorderColor","size","width","h","onClick","colorScheme","variant","mt","isLoading","Signup","handleClick","name","setName","confirmpassword","setConfirmpassword","pic","setPic","picLoading","setPicLoading","console","log","p","accept","pics","undefined","FormData","append","fetch","method","body","then","res","json","url","toString","catch","err","postDetails","files","style","marginTop","Homepage","socket","selectedChatCompare","maxW","centerContent","display","justifyContent","alignItems","bgGradient","w","m","boxShadow","fontWeight","fontFamily","bg","isFitted","_selected","isSameSenderMargin","messages","i","userId","length","sender","_id","isSameSender","isLastMessage","isSameUser","getSender","loggedUser","users","ProfileModal","useDisclosure","isOpen","onOpen","onClose","d","base","icon","View","isCentered","flexDir","boxSize","src","alt","md","ScrollableChat","map","label","placement","hasArrow","mr","cursor","backgroundColor","marginLeft","padding","maxWidth","content","UserBadgeItem","handleFunction","admin","px","py","Close","pl","UserListItem","_hover","background","UpdateGroupChatModal","fetchMessages","fetchAgain","setFetchAgain","groupChatName","setGroupChatName","search","setSearch","searchResult","setSearchResult","renameloading","setRenameLoading","handleSearch","query","Authorization","token","get","handleRename","put","chatId","chatName","handleAddUser","user1","find","u","groupAdmin","handleRemove","flexWrap","pb","ml","SingleChat","setMessages","newMessage","setNewMessage","socketConnected","setSocketConnected","typing","setTyping","istyping","setIsTyping","defaultOptions","loop","autoplay","animationData","rendererSettings","preserveAspectRatio","emit","sendMessage","event","key","io","on","newMessageRecieved","chat","includes","ArrowBack","isGroupChat","toUpperCase","overflowY","alignSelf","margin","className","onKeyDown","options","marginBottom","lastTypingTime","Date","getTime","setTimeout","Chatbox","bgColor","useColorModeValue","borderColor","borderWidth","transition","overflow","ChatLoading","height","GroupChatModal","selectedUsers","setSelectedUsers","handleSubmit","delUser","filter","sel","slice","userToAdd","MyChats","setLoggedUser","fetchChats","Add","aria-label","latestMessage","opacity","substring","SideDrawer","loadingChat","setLoadingChat","accessChat","c","justify","align","borderBottom","Search","_active","count","effect","Effect","SCALE","Bell","notif","n","as","Button","rightIcon","ChevronDown","removeItem","backdropFilter","borderBottomWidth","Chatpage","gap","App","path","component","exact","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.04ef712c.chunk.js","sourcesContent":["import React, { createContext, useContext, useEffect, useState } from \"react\";\nimport { useHistory } from \"react-router-dom\";\n\nconst ChatContext = createContext();\n\nconst ChatProvider = ({ children }) => {\n  const [selectedChat, setSelectedChat] = useState();\n  const [user, setUser] = useState();\n  const [notification, setNotification] = useState([]);\n  const [chats, setChats] = useState();\n\n  const history = useHistory();\n\n  useEffect(() => {\n    const userInfo = JSON.parse(localStorage.getItem(\"userInfo\"));\n    setUser(userInfo);\n\n    if (!userInfo) history.push(\"/\");\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [history]);\n\n  return (\n    <ChatContext.Provider\n      value={{\n        selectedChat,\n        setSelectedChat,\n        user,\n        setUser,\n        notification,\n        setNotification,\n        chats,\n        setChats,\n      }}\n    >\n      {children}\n    </ChatContext.Provider>\n  );\n};\n\nexport const ChatState = () => {\n  return useContext(ChatContext);\n};\n\nexport default ChatProvider;\n","import { Button } from \"@chakra-ui/button\";\nimport { FormControl, FormLabel } from \"@chakra-ui/form-control\";\nimport { Input, InputGroup, InputRightElement } from \"@chakra-ui/input\";\nimport { VStack, Box, Heading, Text } from \"@chakra-ui/layout\";\nimport { useState } from \"react\";\nimport axios from \"axios\";\nimport { useToast } from \"@chakra-ui/react\";\nimport { useHistory } from \"react-router-dom\";\nimport { ChatState } from \"../../Context/ChatProvider\";\n\nconst Login = () => {\n  const [show, setShow] = useState(false);\n  const handleClick = () => setShow(!show);\n  const toast = useToast();\n  const [email, setEmail] = useState(\"\");\n  const [password, setPassword] = useState(\"\");\n  const [loading, setLoading] = useState(false);\n  \n  const history = useHistory();\n  const { setUser } = ChatState();\n\n  const submitHandler = async () => {\n    setLoading(true);\n    if (!email || !password) {\n      toast({\n        title: \"Please fill all the fields\",\n        status: \"warning\",\n        duration: 5000,\n        isClosable: true,\n        position: \"top-right\",\n      });\n      setLoading(false);\n      return;\n    }\n\n    try {\n      const config = {\n        headers: {\n          \"Content-type\": \"application/json\",\n        },\n      };\n\n      const { data } = await axios.post(\n        \"/api/user/login\",\n        { email, password },\n        config\n      );\n\n      toast({\n        title: \"Login Successful\",\n        status: \"success\",\n        duration: 5000,\n        isClosable: true,\n        position: \"top-right\",\n      });\n      setUser(data);\n      localStorage.setItem(\"userInfo\", JSON.stringify(data));\n      setLoading(false);\n      history.push(\"/chats\");\n    } catch (error) {\n      toast({\n        title: \"Error Occurred!\",\n        description: error.response.data.message,\n        status: \"error\",\n        duration: 5000,\n        isClosable: true,\n        position: \"top-right\",\n      });\n      setLoading(false);\n    }\n  };\n\n  return (\n    <>\n      <Heading mb={4} textAlign=\"center\" fontSize=\"2xl\" color=\"blue.500\">\n        Welcome Back\n      </Heading>\n      <Text fontSize=\"sm\" color=\"gray.500\" textAlign=\"center\" mb={4}>\n        Login to continue to N-Connect\n      </Text>\n      <VStack spacing={4}>\n        <FormControl id=\"email\" isRequired>\n          <FormLabel>Email Address</FormLabel>\n          <Input\n            value={email}\n            type=\"email\"\n            placeholder=\"Enter your email\"\n            onChange={(e) => setEmail(e.target.value)}\n            borderRadius={8}\n            focusBorderColor=\"blue.400\"\n          />\n        </FormControl>\n        <FormControl id=\"password\" isRequired>\n          <FormLabel>Password</FormLabel>\n          <InputGroup size=\"md\">\n            <Input\n              value={password}\n              onChange={(e) => setPassword(e.target.value)}\n              type={show ? \"text\" : \"password\"}\n              placeholder=\"Enter your password\"\n              borderRadius={8}\n              focusBorderColor=\"blue.400\"\n            />\n            <InputRightElement width=\"4.5rem\">\n              <Button h=\"1.75rem\" size=\"sm\" onClick={handleClick} colorScheme=\"blue\" variant=\"ghost\">\n                {show ? \"Hide\" : \"Show\"}\n              </Button>\n            </InputRightElement>\n          </InputGroup>\n        </FormControl>\n        <Button\n          colorScheme=\"blue\"\n          width=\"100%\"\n          mt={4}\n          borderRadius={8}\n          onClick={submitHandler}\n          isLoading={loading}\n        >\n          Login\n        </Button>\n        <Button\n          variant=\"outline\"\n          colorScheme=\"red\"\n          width=\"100%\"\n          mt={2}\n          borderRadius={8}\n          onClick={() => {\n            setEmail(\"guest@gmail.com\");\n            setPassword(\"123456\");\n          }}\n        >\n          Use Guest Credentials\n        </Button>\n      </VStack>\n    </>\n  );\n};\n\nexport default Login;\n","import { Button } from \"@chakra-ui/button\";\nimport { FormControl, FormLabel } from \"@chakra-ui/form-control\";\nimport { Input, InputGroup, InputRightElement } from \"@chakra-ui/input\";\nimport { VStack } from \"@chakra-ui/layout\";\nimport { useToast } from \"@chakra-ui/toast\";\nimport axios from \"axios\";\nimport { useState } from \"react\";\nimport { useHistory } from \"react-router\";\n\nconst Signup = () => {\n  const [show, setShow] = useState(false);\n  const handleClick = () => setShow(!show);\n  const toast = useToast();\n  const history = useHistory();\n\n  const [name, setName] = useState();\n  const [email, setEmail] = useState();\n  const [confirmpassword, setConfirmpassword] = useState();\n  const [password, setPassword] = useState();\n  const [pic, setPic] = useState();\n  const [picLoading, setPicLoading] = useState(false);\n\n  const submitHandler = async () => {\n    setPicLoading(true);\n    if (!name || !email || !password || !confirmpassword) {\n      toast({\n        title: \"Please Fill all the Feilds\",\n        status: \"warning\",\n        duration: 5000,\n        isClosable: true,\n        position: \"top-right\",\n      });\n      setPicLoading(false);\n      return;\n    }\n    if (password !== confirmpassword) {\n      toast({\n        title: \"Passwords Do Not Match\",\n        status: \"warning\",\n        duration: 5000,\n        isClosable: true,\n        position: \"top-right\",\n      });\n      return;\n    }\n    console.log(name, email, password, pic);\n    try {\n      const config = {\n        headers: {\n          \"Content-type\": \"application/json\",\n        },\n      };\n      const { data } = await axios.post(\n        \"/api/user\",\n        {\n          name,\n          email,\n          password,\n          pic,\n        },\n        config\n      );\n      console.log(data);\n      toast({\n        title: \"Registration Successful\",\n        status: \"success\",\n        duration: 5000,\n        isClosable: true,\n        position: \"bottom\",\n      });\n      localStorage.setItem(\"userInfo\", JSON.stringify(data));\n      setPicLoading(false);\n      history.push(\"/chats\");\n    } catch (error) {\n      toast({\n        title: \"Error Occured!\",\n        description: error.response.data.message,\n        status: \"error\",\n        duration: 5000,\n        isClosable: true,\n        position: \"top-right\",\n      });\n      setPicLoading(false);\n    }\n  };\n\n  const postDetails = (pics) => {\n    setPicLoading(true);\n    if (pics === undefined) {\n      toast({\n        title: \"Please Select an Image!\",\n        status: \"warning\",\n        duration: 5000,\n        isClosable: true,\n        position: \"bottom\",\n      });\n      return;\n    }\n    console.log(pics);\n    if (pics.type === \"image/jpeg\" || pics.type === \"image/png\") {\n      const data = new FormData();\n      data.append(\"file\", pics);\n      data.append(\"upload_preset\", \"chat-app\");\n      data.append(\"cloud_name\", \"piyushproj\");\n      fetch(\"https://nileshcould\", {\n        method: \"post\",\n        body: data,\n      })\n        .then((res) => res.json())\n        .then((data) => {\n          setPic(data.url.toString());\n          console.log(data.url.toString());\n          setPicLoading(false);\n        })\n        .catch((err) => {\n          console.log(err);\n          setPicLoading(false);\n        });\n    } else {\n      toast({\n        title: \"Please Select an Image!\",\n        status: \"warning\",\n        duration: 5000,\n        isClosable: true,\n        position: \"bottom\",\n      });\n      setPicLoading(false);\n      return;\n    }\n  };\n\n  return (\n    <VStack spacing=\"5px\">\n      <FormControl id=\"first-name\" isRequired>\n        <FormLabel>Name</FormLabel>\n        <Input\n          placeholder=\"Enter Your Name\"\n          onChange={(e) => setName(e.target.value)}\n        />\n      </FormControl>\n      <FormControl id=\"email\" isRequired>\n        <FormLabel>Email Address</FormLabel>\n        <Input\n          type=\"email\"\n          placeholder=\"Enter Your Email Address\"\n          onChange={(e) => setEmail(e.target.value)}\n        />\n      </FormControl>\n      <FormControl id=\"password\" isRequired>\n        <FormLabel>Password</FormLabel>\n        <InputGroup size=\"md\">\n          <Input\n            type={show ? \"text\" : \"password\"}\n            placeholder=\"Enter Password\"\n            onChange={(e) => setPassword(e.target.value)}\n          />\n          <InputRightElement width=\"4.5rem\">\n            <Button h=\"1.75rem\" size=\"sm\" onClick={handleClick} colorScheme=\"blue\" variant=\"ghost\">\n              {show ? \"Hide\" : \"Show\"}\n            </Button>\n          </InputRightElement>\n        </InputGroup>\n      </FormControl>\n      <FormControl id=\"password\" isRequired>\n        <FormLabel>Confirm Password</FormLabel>\n        <InputGroup size=\"md\">\n          <Input\n            type={show ? \"text\" : \"password\"}\n            placeholder=\"Confirm password\"\n            onChange={(e) => setConfirmpassword(e.target.value) }\n          />\n          <InputRightElement width=\"4.5rem\">\n            <Button h=\"1.75rem\" size=\"sm\" onClick={handleClick}colorScheme=\"blue\" variant=\"ghost\">\n              {show ? \"Hide\" : \"Show\"}\n            </Button>\n          </InputRightElement>\n        </InputGroup>\n      </FormControl>\n      <FormControl id=\"pic\">\n        <FormLabel>Upload your Picture</FormLabel>\n        <Input\n          type=\"file\"\n          p={1.5}\n          accept=\"image/*\"\n          onChange={(e) => postDetails(e.target.files[0])}\n        />\n      </FormControl>\n      <Button\n        colorScheme=\"blue\"\n        width=\"100%\"\n        style={{ marginTop: 15 }}\n        onClick={submitHandler}\n        isLoading={picLoading}\n      >\n        Sign Up\n      </Button>\n    </VStack>\n  );\n};\n\nexport default Signup;\n","import {\n  Box,\n  Container,\n  Tab,\n  TabList,\n  TabPanel,\n  TabPanels,\n  Tabs,\n  Text,\n} from \"@chakra-ui/react\";\nimport { useEffect } from \"react\";\nimport { useHistory } from \"react-router\";\nimport Login from \"../components/Authentication/Login\";\nimport Signup from \"../components/Authentication/Signup\";\n\nfunction Homepage() {\n  const history = useHistory();\n\n  useEffect(() => {\n    const user = JSON.parse(localStorage.getItem(\"userInfo\"));\n\n    if (user) history.push(\"/chats\");\n  }, [history]);\n\n  return (\n    <Container maxW=\"md\" centerContent>\n      <Box\n        display=\"flex\"\n        justifyContent=\"center\"\n        alignItems=\"center\"\n        p={4}\n        bgGradient=\"linear(to-r, blue.400, purple.500)\"\n        color=\"white\"\n        w=\"100%\"\n        m=\"40px 0 15px 0\"\n        borderRadius=\"lg\"\n        boxShadow=\"lg\"\n      >\n        <Text fontSize=\"3xl\" fontWeight=\"bold\" fontFamily=\"Work sans\">\n          N-Connect\n        </Text>\n      </Box>\n      <Box bg=\"gray.100\" w=\"100%\" p={6} borderRadius=\"lg\" boxShadow=\"md\" >\n        <Tabs isFitted variant=\"enclosed-colored\" colorScheme=\"blue\">\n          <TabList mb=\"1em\" >\n            <Tab _selected={{ color: \"white\", bg: \"blue.500\" }}>Login</Tab>\n            <Tab _selected={{ color: \"white\", bg: \"purple.500\" }}>Sign Up</Tab>\n          </TabList>\n          <TabPanels>\n            <TabPanel>\n              <Login />\n            </TabPanel>\n            <TabPanel>\n              <Signup />\n            </TabPanel>\n          </TabPanels>\n        </Tabs>\n      </Box>\n    </Container>\n  );\n}\n\nexport default Homepage;\n","import { FormControl } from \"@chakra-ui/form-control\";\nimport { Input } from \"@chakra-ui/input\";\nimport { Box, Text } from \"@chakra-ui/layout\";\nimport \"./styles.css\";\nimport { IconButton, Spinner, useToast } from \"@chakra-ui/react\";\nimport { getSender, getSenderFull } from \"../config/ChatLogics\";\nimport { useEffect, useState } from \"react\";\nimport axios from \"axios\";\nimport { ArrowBackIcon } from \"@chakra-ui/icons\";\nimport ProfileModal from \"./miscellaneous/ProfileModal\";\nimport ScrollableChat from \"./ScrollableChat\";\nimport Lottie from \"react-lottie\";\nimport animationData from \"../animations/typing.json\";\n\nimport io from \"socket.io-client\";\nimport UpdateGroupChatModal from \"./miscellaneous/UpdateGroupChatModal\";\nimport { ChatState } from \"../Context/ChatProvider\";\nconst ENDPOINT = \"http://localhost:5000\";\nvar socket, selectedChatCompare;\n\nconst SingleChat = ({ fetchAgain, setFetchAgain }) => {\n  const [messages, setMessages] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const [newMessage, setNewMessage] = useState(\"\");\n  const [socketConnected, setSocketConnected] = useState(false);\n  const [typing, setTyping] = useState(false);\n  const [istyping, setIsTyping] = useState(false);\n  const toast = useToast();\n\n  const defaultOptions = {\n    loop: true,\n    autoplay: true,\n    animationData: animationData,\n    rendererSettings: {\n      preserveAspectRatio: \"xMidYMid slice\",\n    },\n  };\n  const { selectedChat, setSelectedChat, user, notification, setNotification } =\n    ChatState();\n\n  const fetchMessages = async () => {\n    if (!selectedChat) return;\n\n    try {\n      const config = {\n        headers: {\n          Authorization: `Bearer ${user.token}`,\n        },\n      };\n\n      setLoading(true);\n\n      const { data } = await axios.get(\n        `/api/message/${selectedChat._id}`,\n        config\n      );\n      setMessages(data);\n      setLoading(false);\n\n      socket.emit(\"join chat\", selectedChat._id);\n    } catch (error) {\n      toast({\n        title: \"Error Occured!\",\n        description: \"Failed to Load the Messages\",\n        status: \"error\",\n        duration: 5000,\n        isClosable: true,\n        position: \"bottom\",\n      });\n    }\n  };\n\n  const sendMessage = async (event) => {\n    if (event.key === \"Enter\" && newMessage) {\n      socket.emit(\"stop typing\", selectedChat._id);\n      try {\n        const config = {\n          headers: {\n            \"Content-type\": \"application/json\",\n            Authorization: `Bearer ${user.token}`,\n          },\n        };\n        setNewMessage(\"\");\n        const { data } = await axios.post(\n          \"/api/message\",\n          {\n            content: newMessage,\n            chatId: selectedChat,\n          },\n          config\n        );\n        socket.emit(\"new message\", data);\n        setMessages([...messages, data]);\n      } catch (error) {\n        toast({\n          title: \"Error Occured!\",\n          description: \"Failed to send the Message\",\n          status: \"error\",\n          duration: 5000,\n          isClosable: true,\n          position: \"bottom\",\n        });\n      }\n    }\n  };\n\n  useEffect(() => {\n    socket = io(ENDPOINT);\n    socket.emit(\"setup\", user);\n    socket.on(\"connected\", () => setSocketConnected(true));\n    socket.on(\"typing\", () => setIsTyping(true));\n    socket.on(\"stop typing\", () => setIsTyping(false));\n\n    // eslint-disable-next-line\n  }, []);\n\n  useEffect(() => {\n    fetchMessages();\n\n    selectedChatCompare = selectedChat;\n    // eslint-disable-next-line\n  }, [selectedChat]);\n\n  useEffect(() => {\n    socket.on(\"message recieved\", (newMessageRecieved) => {\n      if (\n        !selectedChatCompare || // if chat is not selected or doesn't match current chat\n        selectedChatCompare._id !== newMessageRecieved.chat._id\n      ) {\n        if (!notification.includes(newMessageRecieved)) {\n          setNotification([newMessageRecieved, ...notification]);\n          setFetchAgain(!fetchAgain);\n        }\n      } else {\n        setMessages([...messages, newMessageRecieved]);\n      }\n    });\n  });\n\n  const typingHandler = (e) => {\n    setNewMessage(e.target.value);\n\n    if (!socketConnected) return;\n\n    if (!typing) {\n      setTyping(true);\n      socket.emit(\"typing\", selectedChat._id);\n    }\n    let lastTypingTime = new Date().getTime();\n    var timerLength = 3000;\n    setTimeout(() => {\n      var timeNow = new Date().getTime();\n      var timeDiff = timeNow - lastTypingTime;\n      if (timeDiff >= timerLength && typing) {\n        socket.emit(\"stop typing\", selectedChat._id);\n        setTyping(false);\n      }\n    }, timerLength);\n  };\n\n  return (\n    <>\n      {selectedChat ? (\n        <>\n          <Text\n            fontSize={{ base: \"28px\", md: \"30px\" }}\n            pb={3}\n            px={2}\n            w=\"100%\"\n            fontFamily=\"Work sans\"\n            d=\"flex\"\n            justifyContent={{ base: \"space-between\" }}\n            alignItems=\"center\"\n          >\n            <IconButton\n              d={{ base: \"flex\", md: \"none\" }}\n              icon={<ArrowBackIcon />}\n              onClick={() => setSelectedChat(\"\")}\n            />\n            {messages &&\n              (!selectedChat.isGroupChat ? (\n                <>\n                  {getSender(user, selectedChat.users)}\n                  <ProfileModal\n                    user={getSenderFull(user, selectedChat.users)}\n                  />\n                </>\n              ) : (\n                <>\n                  {selectedChat.chatName.toUpperCase()}\n                  <UpdateGroupChatModal\n                    fetchMessages={fetchMessages}\n                    fetchAgain={fetchAgain}\n                    setFetchAgain={setFetchAgain}\n                  />\n                </>\n              ))}\n          </Text>\n          <Box\n            d=\"flex\"\n            flexDir=\"column\"\n            justifyContent=\"flex-end\"\n            p={3}\n            bg=\"#E8E8E8\"\n            w=\"100%\"\n            h=\"100%\"\n            borderRadius=\"lg\"\n            overflowY=\"hidden\"\n          >\n            {loading ? (\n              <Spinner\n                size=\"xl\"\n                w={20}\n                h={20}\n                alignSelf=\"center\"\n                margin=\"auto\"\n              />\n            ) : (\n              <div className=\"messages\">\n                <ScrollableChat messages={messages} />\n              </div>\n            )}\n\n            <FormControl\n              onKeyDown={sendMessage}\n              id=\"first-name\"\n              isRequired\n              mt={3}\n            >\n              {istyping ? (\n                <div>\n                  <Lottie\n                    options={defaultOptions}\n                    // height={50}\n                    width={70}\n                    style={{ marginBottom: 15, marginLeft: 0 }}\n                  />\n                </div>\n              ) : (\n                <></>\n              )}\n              <Input\n                variant=\"filled\"\n                bg=\"#E0E0E0\"\n                placeholder=\"Enter a message..\"\n                value={newMessage}\n                onChange={typingHandler}\n              />\n            </FormControl>\n          </Box>\n        </>\n      ) : (\n        // to get socket.io on same page\n        <Box d=\"flex\" alignItems=\"center\" justifyContent=\"center\" h=\"100%\">\n          <Text fontSize=\"3xl\" pb={3} fontFamily=\"Work sans\">\n            Click on a user to start chatting\n          </Text>\n        </Box>\n      )}\n    </>\n  );\n};\n\nexport default SingleChat;\n","export const isSameSenderMargin = (messages, m, i, userId) => {\n  // console.log(i === messages.length - 1);\n\n  if (\n    i < messages.length - 1 &&\n    messages[i + 1].sender._id === m.sender._id &&\n    messages[i].sender._id !== userId\n  )\n    return 33;\n  else if (\n    (i < messages.length - 1 &&\n      messages[i + 1].sender._id !== m.sender._id &&\n      messages[i].sender._id !== userId) ||\n    (i === messages.length - 1 && messages[i].sender._id !== userId)\n  )\n    return 0;\n  else return \"auto\";\n};\n\nexport const isSameSender = (messages, m, i, userId) => {\n  return (\n    i < messages.length - 1 &&\n    (messages[i + 1].sender._id !== m.sender._id ||\n      messages[i + 1].sender._id === undefined) &&\n    messages[i].sender._id !== userId\n  );\n};\n\nexport const isLastMessage = (messages, i, userId) => {\n  return (\n    i === messages.length - 1 &&\n    messages[messages.length - 1].sender._id !== userId &&\n    messages[messages.length - 1].sender._id\n  );\n};\n\nexport const isSameUser = (messages, m, i) => {\n  return i > 0 && messages[i - 1].sender._id === m.sender._id;\n};\n\nexport const getSender = (loggedUser, users) => {\n  return users[0]?._id === loggedUser?._id ? users[1].name : users[0].name;\n};\n\nexport const getSenderFull = (loggedUser, users) => {\n  return users[0]._id === loggedUser._id ? users[1] : users[0];\n};\n","import { ViewIcon } from \"@chakra-ui/icons\";\nimport {\n  Modal,\n  ModalOverlay,\n  ModalContent,\n  ModalHeader,\n  ModalFooter,\n  ModalBody,\n  ModalCloseButton,\n  Button,\n  useDisclosure,\n  IconButton,\n  Text,\n  Image,\n} from \"@chakra-ui/react\";\n\nconst ProfileModal = ({ user, children }) => {\n  const { isOpen, onOpen, onClose } = useDisclosure();\n\n  return (\n    <>\n      {children ? (\n        <span onClick={onOpen}>{children}</span>\n      ) : (\n        <IconButton d={{ base: \"flex\" }} icon={<ViewIcon />} onClick={onOpen} />\n      )}\n      <Modal size=\"lg\" onClose={onClose} isOpen={isOpen} isCentered>\n        <ModalOverlay />\n        <ModalContent h=\"410px\">\n          <ModalHeader\n            fontSize=\"40px\"\n            fontFamily=\"Work sans\"\n            d=\"flex\"\n            justifyContent=\"center\"\n          >\n            {user.name}\n          </ModalHeader>\n          <ModalCloseButton />\n          <ModalBody\n            d=\"flex\"\n            flexDir=\"column\"\n            alignItems=\"center\"\n            justifyContent=\"space-between\"\n          >\n            <Image\n              borderRadius=\"full\"\n              boxSize=\"150px\"\n              src={user.pic}\n              alt={user.name}\n            />\n            <Text\n              fontSize={{ base: \"28px\", md: \"30px\" }}\n              fontFamily=\"Work sans\"\n            >\n              Email: {user.email}\n            </Text>\n          </ModalBody>\n          <ModalFooter>\n            <Button onClick={onClose}>Close</Button>\n          </ModalFooter>\n        </ModalContent>\n      </Modal>\n    </>\n  );\n};\n\nexport default ProfileModal;\n","import { Avatar } from \"@chakra-ui/avatar\";\nimport { Tooltip } from \"@chakra-ui/tooltip\";\nimport ScrollableFeed from \"react-scrollable-feed\";\nimport {\n  isLastMessage,\n  isSameSender,\n  isSameSenderMargin,\n  isSameUser,\n} from \"../config/ChatLogics\";\nimport { ChatState } from \"../Context/ChatProvider\";\n\nconst ScrollableChat = ({ messages }) => {\n  const { user } = ChatState();\n\n  return (\n    <ScrollableFeed>\n      {messages &&\n        messages.map((m, i) => (\n          <div style={{ display: \"flex\" }} key={m._id}>\n            {(isSameSender(messages, m, i, user._id) ||\n              isLastMessage(messages, i, user._id)) && (\n              <Tooltip label={m.sender.name} placement=\"bottom-start\" hasArrow>\n                <Avatar\n                  mt=\"7px\"\n                  mr={1}\n                  size=\"sm\"\n                  cursor=\"pointer\"\n                  name={m.sender.name}\n                  src={m.sender.pic}\n                />\n              </Tooltip>\n            )}\n            <span\n              style={{\n                backgroundColor: `${\n                  m.sender._id === user._id ? \"#BEE3F8\" : \"#B9F5D0\"\n                }`,\n                marginLeft: isSameSenderMargin(messages, m, i, user._id),\n                marginTop: isSameUser(messages, m, i, user._id) ? 3 : 10,\n                borderRadius: \"20px\",\n                padding: \"5px 15px\",\n                maxWidth: \"75%\",\n              }}\n            >\n              {m.content}\n            </span>\n          </div>\n        ))}\n    </ScrollableFeed>\n  );\n};\n\nexport default ScrollableChat;\n","import { CloseIcon } from \"@chakra-ui/icons\";\nimport { Badge } from \"@chakra-ui/layout\";\n\nconst UserBadgeItem = ({ user, handleFunction, admin }) => {\n  return (\n    <Badge\n      px={2}\n      py={1}\n      borderRadius=\"lg\"\n      m={1}\n      mb={2}\n      variant=\"solid\"\n      fontSize={12}\n      colorScheme=\"purple\"\n      cursor=\"pointer\"\n      onClick={handleFunction}\n    >\n      {user.name}\n      {admin === user._id && <span> (Admin)</span>}\n      <CloseIcon pl={1} />\n    </Badge>\n  );\n};\n\nexport default UserBadgeItem;\n","import { Avatar } from \"@chakra-ui/avatar\";\nimport { Box, Text } from \"@chakra-ui/layout\";\nimport { ChatState } from \"../../Context/ChatProvider\";\n\nconst UserListItem = ({ handleFunction }) => {\n  const { user } = ChatState();\n\n  return (\n    <Box\n      onClick={handleFunction}\n      cursor=\"pointer\"\n      bg=\"#E8E8E8\"\n      _hover={{\n        background: \"#38B2AC\",\n        color: \"white\",\n      }}\n      w=\"100%\"\n      d=\"flex\"\n      alignItems=\"center\"\n      color=\"black\"\n      px={3}\n      py={2}\n      mb={2}\n      borderRadius=\"lg\"\n    >\n      <Avatar\n        mr={2}\n        size=\"sm\"\n        cursor=\"pointer\"\n        name={user.name}\n        src={user.pic}\n      />\n      <Box>\n        <Text>{user.name}</Text>\n        <Text fontSize=\"xs\">\n          <b>Email : </b>\n          {user.email}\n        </Text>\n      </Box>\n    </Box>\n  );\n};\n\nexport default UserListItem;\n","import { ViewIcon } from \"@chakra-ui/icons\";\nimport {\n  Modal,\n  ModalOverlay,\n  ModalContent,\n  ModalHeader,\n  ModalFooter,\n  ModalBody,\n  ModalCloseButton,\n  Button,\n  useDisclosure,\n  FormControl,\n  Input,\n  useToast,\n  Box,\n  IconButton,\n  Spinner,\n} from \"@chakra-ui/react\";\nimport axios from \"axios\";\nimport { useState } from \"react\";\nimport { ChatState } from \"../../Context/ChatProvider\";\nimport UserBadgeItem from \"../userAvatar/UserBadgeItem\";\nimport UserListItem from \"../userAvatar/UserListItem\";\n\nconst UpdateGroupChatModal = ({ fetchMessages, fetchAgain, setFetchAgain }) => {\n  const { isOpen, onOpen, onClose } = useDisclosure();\n  const [groupChatName, setGroupChatName] = useState();\n  const [search, setSearch] = useState(\"\");\n  const [searchResult, setSearchResult] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const [renameloading, setRenameLoading] = useState(false);\n  const toast = useToast();\n\n  const { selectedChat, setSelectedChat, user } = ChatState();\n\n  const handleSearch = async (query) => {\n    setSearch(query);\n    if (!query) {\n      return;\n    }\n\n    try {\n      setLoading(true);\n      const config = {\n        headers: {\n          Authorization: `Bearer ${user.token}`,\n        },\n      };\n      const { data } = await axios.get(`/api/user?search=${search}`, config);\n      console.log(data);\n      setLoading(false);\n      setSearchResult(data);\n    } catch (error) {\n      toast({\n        title: \"Error Occured!\",\n        description: \"Failed to Load the Search Results\",\n        status: \"error\",\n        duration: 5000,\n        isClosable: true,\n        position: \"bottom-left\",\n      });\n      setLoading(false);\n    }\n  };\n\n  const handleRename = async () => {\n    if (!groupChatName) return;\n\n    try {\n      setRenameLoading(true);\n      const config = {\n        headers: {\n          Authorization: `Bearer ${user.token}`,\n        },\n      };\n      const { data } = await axios.put(\n        `/api/chat/rename`,\n        {\n          chatId: selectedChat._id,\n          chatName: groupChatName,\n        },\n        config\n      );\n\n      console.log(data._id);\n      // setSelectedChat(\"\");\n      setSelectedChat(data);\n      setFetchAgain(!fetchAgain);\n      setRenameLoading(false);\n    } catch (error) {\n      toast({\n        title: \"Error Occured!\",\n        description: error.response.data.message,\n        status: \"error\",\n        duration: 5000,\n        isClosable: true,\n        position: \"bottom\",\n      });\n      setRenameLoading(false);\n    }\n    setGroupChatName(\"\");\n  };\n\n  const handleAddUser = async (user1) => {\n    if (selectedChat.users.find((u) => u._id === user1._id)) {\n      toast({\n        title: \"User Already in group!\",\n        status: \"error\",\n        duration: 5000,\n        isClosable: true,\n        position: \"bottom\",\n      });\n      return;\n    }\n\n    if (selectedChat.groupAdmin._id !== user._id) {\n      toast({\n        title: \"Only admins can add someone!\",\n        status: \"error\",\n        duration: 5000,\n        isClosable: true,\n        position: \"bottom\",\n      });\n      return;\n    }\n\n    try {\n      setLoading(true);\n      const config = {\n        headers: {\n          Authorization: `Bearer ${user.token}`,\n        },\n      };\n      const { data } = await axios.put(\n        `/api/chat/groupadd`,\n        {\n          chatId: selectedChat._id,\n          userId: user1._id,\n        },\n        config\n      );\n\n      setSelectedChat(data);\n      setFetchAgain(!fetchAgain);\n      setLoading(false);\n    } catch (error) {\n      toast({\n        title: \"Error Occured!\",\n        description: error.response.data.message,\n        status: \"error\",\n        duration: 5000,\n        isClosable: true,\n        position: \"bottom\",\n      });\n      setLoading(false);\n    }\n    setGroupChatName(\"\");\n  };\n\n  const handleRemove = async (user1) => {\n    if (selectedChat.groupAdmin._id !== user._id && user1._id !== user._id) {\n      toast({\n        title: \"Only admins can remove someone!\",\n        status: \"error\",\n        duration: 5000,\n        isClosable: true,\n        position: \"bottom\",\n      });\n      return;\n    }\n\n    try {\n      setLoading(true);\n      const config = {\n        headers: {\n          Authorization: `Bearer ${user.token}`,\n        },\n      };\n      const { data } = await axios.put(\n        `/api/chat/groupremove`,\n        {\n          chatId: selectedChat._id,\n          userId: user1._id,\n        },\n        config\n      );\n\n      user1._id === user._id ? setSelectedChat() : setSelectedChat(data);\n      setFetchAgain(!fetchAgain);\n      fetchMessages();\n      setLoading(false);\n    } catch (error) {\n      toast({\n        title: \"Error Occured!\",\n        description: error.response.data.message,\n        status: \"error\",\n        duration: 5000,\n        isClosable: true,\n        position: \"bottom\",\n      });\n      setLoading(false);\n    }\n    setGroupChatName(\"\");\n  };\n\n  return (\n    <>\n      <IconButton d={{ base: \"flex\" }} icon={<ViewIcon />} onClick={onOpen} />\n\n      <Modal onClose={onClose} isOpen={isOpen} isCentered>\n        <ModalOverlay />\n        <ModalContent>\n          <ModalHeader\n            fontSize=\"35px\"\n            fontFamily=\"Work sans\"\n            d=\"flex\"\n            justifyContent=\"center\"\n          >\n            {selectedChat.chatName}\n          </ModalHeader>\n\n          <ModalCloseButton />\n          <ModalBody d=\"flex\" flexDir=\"column\" alignItems=\"center\">\n            <Box w=\"100%\" d=\"flex\" flexWrap=\"wrap\" pb={3}>\n              {selectedChat.users.map((u) => (\n                <UserBadgeItem\n                  key={u._id}\n                  user={u}\n                  admin={selectedChat.groupAdmin}\n                  handleFunction={() => handleRemove(u)}\n                />\n              ))}\n            </Box>\n            <FormControl d=\"flex\">\n              <Input\n                placeholder=\"Chat Name\"\n                mb={3}\n                value={groupChatName}\n                onChange={(e) => setGroupChatName(e.target.value)}\n              />\n              <Button\n                variant=\"solid\"\n                colorScheme=\"teal\"\n                ml={1}\n                isLoading={renameloading}\n                onClick={handleRename}\n              >\n                Update\n              </Button>\n            </FormControl>\n            <FormControl>\n              <Input\n                placeholder=\"Add User to group\"\n                mb={1}\n                onChange={(e) => handleSearch(e.target.value)}\n              />\n            </FormControl>\n\n            {loading ? (\n              <Spinner size=\"lg\" />\n            ) : (\n              searchResult?.map((user) => (\n                <UserListItem\n                  key={user._id}\n                  user={user}\n                  handleFunction={() => handleAddUser(user)}\n                />\n              ))\n            )}\n          </ModalBody>\n          <ModalFooter>\n            <Button onClick={() => handleRemove(user)} colorScheme=\"red\">\n              Leave Group\n            </Button>\n          </ModalFooter>\n        </ModalContent>\n      </Modal>\n    </>\n  );\n};\n\nexport default UpdateGroupChatModal;\n","import { Box } from \"@chakra-ui/layout\";\nimport { useColorModeValue } from \"@chakra-ui/react\";\nimport \"./styles.css\";\nimport SingleChat from \"./SingleChat\";\nimport { ChatState } from \"../Context/ChatProvider\";\n\nconst Chatbox = ({ fetchAgain, setFetchAgain }) => {\n  const { selectedChat } = ChatState();\n  const bgColor = useColorModeValue(\"white\", \"gray.800\"); // Light/Dark Mode Support\n  const borderColor = useColorModeValue(\"gray.300\", \"gray.600\");\n\n  return (\n    <Box\n    display={{ base: selectedChat ? \"flex\" : \"none\", md: \"flex\" }}\n    alignItems=\"center\"\n    flexDir=\"column\"\n    p={4}\n    bg={bgColor}\n    w={{ base: \"100%\", md: \"70%\" }}\n    borderRadius=\"lg\"\n    borderWidth=\"2px\"\n    borderColor={borderColor}\n    boxShadow=\"lg\"\n    m=\"5px\"  // Proper margin prop\n    transition=\"all 0.3s ease-in-out\"\n    overflow=\"hidden\" // Prevents content overflow\n  >\n      <SingleChat fetchAgain={fetchAgain} setFetchAgain={setFetchAgain} />\n    </Box>\n  );\n};\n\nexport default Chatbox;\n","import { Stack } from \"@chakra-ui/layout\";\nimport { Skeleton } from \"@chakra-ui/skeleton\";\n\nconst ChatLoading = () => {\n  return (\n    <Stack>\n      <Skeleton height=\"45px\" />\n      <Skeleton height=\"45px\" />\n      <Skeleton height=\"45px\" />\n      <Skeleton height=\"45px\" />\n      <Skeleton height=\"45px\" />\n      <Skeleton height=\"45px\" />\n      <Skeleton height=\"45px\" />\n      <Skeleton height=\"45px\" />\n      <Skeleton height=\"45px\" />\n      <Skeleton height=\"45px\" />\n      <Skeleton height=\"45px\" />\n      <Skeleton height=\"45px\" />\n    </Stack>\n  );\n};\n\nexport default ChatLoading;\n","import {\n  Modal,\n  ModalOverlay,\n  ModalContent,\n  ModalHeader,\n  ModalFooter,\n  ModalBody,\n  ModalCloseButton,\n  Button,\n  useDisclosure,\n  FormControl,\n  Input,\n  useToast,\n  Box,\n} from \"@chakra-ui/react\";\nimport axios from \"axios\";\nimport { useState } from \"react\";\nimport { ChatState } from \"../../Context/ChatProvider\";\nimport UserBadgeItem from \"../userAvatar/UserBadgeItem\";\nimport UserListItem from \"../userAvatar/UserListItem\";\n\nconst GroupChatModal = ({ children }) => {\n  const { isOpen, onOpen, onClose } = useDisclosure();\n  const [groupChatName, setGroupChatName] = useState();\n  const [selectedUsers, setSelectedUsers] = useState([]);\n  const [search, setSearch] = useState(\"\");\n  const [searchResult, setSearchResult] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const toast = useToast();\n\n  const { user, chats, setChats } = ChatState();\n\n  const handleGroup = (userToAdd) => {\n    if (selectedUsers.includes(userToAdd)) {\n      toast({\n        title: \"User already added\",\n        status: \"warning\",\n        duration: 5000,\n        isClosable: true,\n        position: \"top\",\n      });\n      return;\n    }\n\n    setSelectedUsers([...selectedUsers, userToAdd]);\n  };\n\n  const handleSearch = async (query) => {\n    setSearch(query);\n    if (!query) {\n      return;\n    }\n\n    try {\n      setLoading(true);\n      const config = {\n        headers: {\n          Authorization: `Bearer ${user.token}`,\n        },\n      };\n      const { data } = await axios.get(`/api/user?search=${search}`, config);\n      console.log(data);\n      setLoading(false);\n      setSearchResult(data);\n    } catch (error) {\n      toast({\n        title: \"Error Occured!\",\n        description: \"Failed to Load the Search Results\",\n        status: \"error\",\n        duration: 5000,\n        isClosable: true,\n        position: \"bottom-left\",\n      });\n    }\n  };\n\n  const handleDelete = (delUser) => {\n    setSelectedUsers(selectedUsers.filter((sel) => sel._id !== delUser._id));\n  };\n\n  const handleSubmit = async () => {\n    if (!groupChatName || !selectedUsers) {\n      toast({\n        title: \"Please fill all the feilds\",\n        status: \"warning\",\n        duration: 5000,\n        isClosable: true,\n        position: \"top\",\n      });\n      return;\n    }\n\n    try {\n      const config = {\n        headers: {\n          Authorization: `Bearer ${user.token}`,\n        },\n      };\n      const { data } = await axios.post(\n        `/api/chat/group`,\n        {\n          name: groupChatName,\n          users: JSON.stringify(selectedUsers.map((u) => u._id)),\n        },\n        config\n      );\n      setChats([data, ...chats]);\n      onClose();\n      toast({\n        title: \"New Group Chat Created!\",\n        status: \"success\",\n        duration: 5000,\n        isClosable: true,\n        position: \"bottom\",\n      });\n    } catch (error) {\n      toast({\n        title: \"Failed to Create the Chat!\",\n        description: error.response.data,\n        status: \"error\",\n        duration: 5000,\n        isClosable: true,\n        position: \"bottom\",\n      });\n    }\n  };\n\n  return (\n    <>\n      <span onClick={onOpen}>{children}</span>\n\n      <Modal onClose={onClose} isOpen={isOpen} isCentered>\n        <ModalOverlay />\n        <ModalContent>\n          <ModalHeader\n            fontSize=\"35px\"\n            fontFamily=\"Work sans\"\n            d=\"flex\"\n            justifyContent=\"center\"\n          >\n            Create Group Chat\n          </ModalHeader>\n          <ModalCloseButton />\n          <ModalBody d=\"flex\" flexDir=\"column\" alignItems=\"center\">\n            <FormControl>\n              <Input\n                placeholder=\"Chat Name\"\n                mb={3}\n                onChange={(e) => setGroupChatName(e.target.value)}\n              />\n            </FormControl>\n            <FormControl>\n              <Input\n                placeholder=\"Add Users eg: John, Piyush, Jane\"\n                mb={1}\n                onChange={(e) => handleSearch(e.target.value)}\n              />\n            </FormControl>\n            <Box w=\"100%\" d=\"flex\" flexWrap=\"wrap\">\n              {selectedUsers.map((u) => (\n                <UserBadgeItem\n                  key={u._id}\n                  user={u}\n                  handleFunction={() => handleDelete(u)}\n                />\n              ))}\n            </Box>\n            {loading ? (\n              // <ChatLoading />\n              <div>Loading...</div>\n            ) : (\n              searchResult\n                ?.slice(0, 4)\n                .map((user) => (\n                  <UserListItem\n                    key={user._id}\n                    user={user}\n                    handleFunction={() => handleGroup(user)}\n                  />\n                ))\n            )}\n          </ModalBody>\n          <ModalFooter>\n            <Button onClick={handleSubmit} colorScheme=\"blue\">\n              Create Chat\n            </Button>\n          </ModalFooter>\n        </ModalContent>\n      </Modal>\n    </>\n  );\n};\n\nexport default GroupChatModal;\n","import { AddIcon } from \"@chakra-ui/icons\";\nimport { Box, Stack, Text, Heading, Divider } from \"@chakra-ui/layout\";\nimport { useToast } from \"@chakra-ui/toast\";\nimport axios from \"axios\";\nimport { useEffect, useState } from \"react\";\nimport { getSender } from \"../config/ChatLogics\";\nimport ChatLoading from \"./ChatLoading\";\nimport GroupChatModal from \"./miscellaneous/GroupChatModal\";\nimport { Button, useColorModeValue, IconButton } from \"@chakra-ui/react\";\nimport { ChatState } from \"../Context/ChatProvider\";\n\nconst MyChats = ({ fetchAgain }) => {\n  const [loggedUser, setLoggedUser] = useState();\n\n  const { selectedChat, setSelectedChat, user, chats, setChats } = ChatState();\n  const toast = useToast();\n\n  const fetchChats = async () => {\n    try {\n      const config = {\n        headers: {\n          Authorization: `Bearer ${user.token}`,\n        },\n      };\n\n      const { data } = await axios.get(\"/api/chat\", config);\n      setChats(data);\n    } catch (error) {\n      toast({\n        title: \"Error Occurred!\",\n        description: \"Failed to Load the chats\",\n        status: \"error\",\n        duration: 5000,\n        isClosable: true,\n        position: \"bottom-left\",\n      });\n    }\n  };\n\n  useEffect(() => {\n    setLoggedUser(JSON.parse(localStorage.getItem(\"userInfo\")));\n    fetchChats();\n    // eslint-disable-next-line\n  }, [fetchAgain]);\n\n  return (\n    <Box\n      display={{ base: selectedChat ? \"none\" : \"flex\", md: \"flex\" }}\n      flexDir=\"column\"\n      alignItems=\"center\"\n      p={4}\n      m=\"2px\"\n      bg={useColorModeValue(\"white\", \"gray.800\")}\n      w={{ base: \"100%\", md: \"30%\" }}\n      borderRadius=\"lg\"\n      borderWidth=\"1px\"\n      borderColor={useColorModeValue(\"gray.300\", \"gray.600\")}\n      boxShadow=\"md\"\n      transition=\"all 0.3s ease-in-out\"\n    >\n      <Box\n        pb={3}\n        px={4}\n        w=\"100%\"\n        display=\"flex\"\n        justifyContent=\"space-between\"\n        alignItems=\"center\"\n      >\n        <Heading size=\"md\" fontFamily=\"Work Sans\">\n          My Chats\n        </Heading>\n        <GroupChatModal>\n          <IconButton\n            icon={<AddIcon />}\n            colorScheme=\"blue\"\n            aria-label=\"New Group Chat\"\n            size=\"sm\"\n          />\n        </GroupChatModal>\n      </Box>\n      <Divider />\n      <Box\n        display=\"flex\"\n        flexDir=\"column\"\n        p={3}\n        bg={useColorModeValue(\"gray.100\", \"gray.700\")}\n        w=\"100%\"\n        h=\"100%\"\n        borderRadius=\"lg\"\n        overflowY=\"auto\"\n      >\n        {chats ? (\n          <Stack>\n            {chats.map((chat) => (\n              <Box\n                key={chat._id}\n                onClick={() => setSelectedChat(chat)}\n                cursor=\"pointer\"\n                bg={selectedChat === chat ? \"blue.500\" : \"white\"}\n                color={selectedChat === chat ? \"white\" : \"black\"}\n                px={4}\n                py={3}\n\n                borderRadius=\"lg\"\n                boxShadow=\"sm\"\n                transition=\"0.2s\"\n                _hover={{\n                  bg: selectedChat === chat ? \"blue.600\" : \"gray.200\",\n                }}\n              >\n                <Text fontWeight=\"bold\">\n                  {!chat.isGroupChat\n                    ? getSender(loggedUser, chat.users)\n                    : chat.chatName}\n                </Text>\n                {chat.latestMessage && (\n                  <Text fontSize=\"sm\" opacity={0.8}>\n                    <b>{chat.latestMessage.sender.name}:</b>{\" \"}\n                    {chat.latestMessage.content.length > 50\n                      ? chat.latestMessage.content.substring(0, 51) + \"...\"\n                      : chat.latestMessage.content}\n                  </Text>\n                )}\n              </Box>\n            ))}\n          </Stack>\n        ) : (\n          <ChatLoading />\n        )}\n      </Box>\n    </Box>\n  );\n};\n\nexport default MyChats;\n","import { Button, IconButton } from \"@chakra-ui/button\";\nimport { useDisclosure } from \"@chakra-ui/hooks\";\nimport { Input } from \"@chakra-ui/input\";\nimport { Box, Text, Flex, VStack, HStack } from \"@chakra-ui/layout\";\nimport {\n  Menu,\n  MenuButton,\n  MenuDivider,\n  MenuItem,\n  MenuList,\n} from \"@chakra-ui/menu\";\nimport {\n  Drawer,\n  DrawerBody,\n  DrawerContent,\n  DrawerHeader,\n  DrawerOverlay,\n} from \"@chakra-ui/modal\";\nimport { Tooltip } from \"@chakra-ui/tooltip\";\nimport { BellIcon, ChevronDownIcon, SearchIcon } from \"@chakra-ui/icons\";\nimport { Avatar } from \"@chakra-ui/avatar\";\nimport { useHistory } from \"react-router-dom\";\nimport { useState } from \"react\";\nimport axios from \"axios\";\nimport { useToast } from \"@chakra-ui/toast\";\nimport ChatLoading from \"../ChatLoading\";\nimport { Spinner } from \"@chakra-ui/spinner\";\nimport ProfileModal from \"./ProfileModal\";\nimport NotificationBadge from \"react-notification-badge\";\nimport { Effect } from \"react-notification-badge\";\nimport { getSender } from \"../../config/ChatLogics\";\nimport UserListItem from \"../userAvatar/UserListItem\";\nimport { ChatState } from \"../../Context/ChatProvider\";\n\nfunction SideDrawer() {\n  const [search, setSearch] = useState(\"\");\n  const [searchResult, setSearchResult] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const [loadingChat, setLoadingChat] = useState(false);\n\n  const {\n    setSelectedChat,\n    user,\n    notification,\n    setNotification,\n    chats,\n    setChats,\n  } = ChatState();\n\n  const toast = useToast();\n  const { isOpen, onOpen, onClose } = useDisclosure();\n  const history = useHistory();\n\n  const logoutHandler = () => {\n    localStorage.removeItem(\"userInfo\");\n    history.push(\"/\");\n  };\n\n  const handleSearch = async () => {\n    if (!search) {\n      toast({\n        title: \"Please enter something in search\",\n        status: \"warning\",\n        duration: 5000,\n        isClosable: true,\n        position: \"top-left\",\n      });\n      return;\n    }\n\n    try {\n      setLoading(true);\n      const config = {\n        headers: {\n          Authorization: `Bearer ${user.token}`,\n        },\n      };\n      const { data } = await axios.get(`/api/user?search=${search}`, config);\n      setLoading(false);\n      setSearchResult(data);\n    } catch (error) {\n      toast({\n        title: \"Error Occurred!\",\n        description: \"Failed to Load Search Results\",\n        status: \"error\",\n        duration: 5000,\n        isClosable: true,\n        position: \"bottom-left\",\n      });\n    }\n  };\n\n  const accessChat = async (userId) => {\n    try {\n      setLoadingChat(true);\n      const config = {\n        headers: {\n          \"Content-type\": \"application/json\",\n          Authorization: `Bearer ${user.token}`,\n        },\n      };\n      const { data } = await axios.post(`/api/chat`, { userId }, config);\n\n      if (!chats.find((c) => c._id === data._id)) setChats([data, ...chats]);\n      setSelectedChat(data);\n      setLoadingChat(false);\n      onClose();\n    } catch (error) {\n      toast({\n        title: \"Error fetching the chat\",\n        description: error.message,\n        status: \"error\",\n        duration: 5000,\n        isClosable: true,\n        position: \"bottom-left\",\n      });\n    }\n  };\n\n  return (\n    <>\n      <Flex\n        justify=\"space-between\"\n        align=\"center\"\n        bg=\"white\"\n        w=\"100%\"\n        p={3}\n        borderBottom=\"1px solid\"\n        borderColor=\"gray.300\"\n        boxShadow=\"lg\"\n        borderRadius=\"md\"\n        px={5}\n      >\n        <Tooltip label=\"Search Users to chat\" hasArrow placement=\"bottom-end\">\n          <IconButton\n            icon={<SearchIcon />}\n            onClick={onOpen}\n            variant=\"ghost\"\n            aria-label=\"Search Users\"\n            _hover={{ bg: \"gray.100\" }}\n            _active={{ bg: \"gray.200\" }}\n          />\n        </Tooltip>\n        <Text fontSize=\"2xl\" fontFamily=\"Work Sans\" fontWeight=\"bold\">\n          N-Connect\n        </Text>\n        <HStack spacing={4}>\n          <Menu>\n            <MenuButton position=\"relative\">\n              <NotificationBadge count={notification.length} effect={Effect.SCALE} />\n              <BellIcon fontSize=\"2xl\" />\n            </MenuButton>\n            <MenuList bg=\"white\" boxShadow=\"xl\" borderRadius=\"md\">\n              {!notification.length ? (\n                <MenuItem>No New Messages</MenuItem>\n              ) : (\n                notification.map((notif) => (\n                  <MenuItem\n                    key={notif._id}\n                    onClick={() => {\n                      setSelectedChat(notif.chat);\n                      setNotification(notification.filter((n) => n !== notif));\n                    }}\n                  >\n                    {notif.chat.isGroupChat\n                      ? `New Message in ${notif.chat.chatName}`\n                      : `New Message from ${getSender(user, notif.chat.users)}`}\n                  </MenuItem>\n                ))\n              )}\n            </MenuList>\n          </Menu>\n          <Menu>\n            <MenuButton as={Button} bg=\"white\" rightIcon={<ChevronDownIcon />} _hover={{ bg: \"gray.100\" }}>\n              <Avatar size=\"sm\" name={user.name} src={user.pic} />\n            </MenuButton>\n            <MenuList bg=\"white\" boxShadow=\"xl\" borderRadius=\"md\">\n              <ProfileModal user={user}>\n                <MenuItem>My Profile</MenuItem>\n              </ProfileModal>\n              <MenuDivider />\n              <MenuItem onClick={logoutHandler}>Logout</MenuItem>\n            </MenuList>\n          </Menu>\n        </HStack>\n      </Flex>\n\n      {/* Search Drawer */}\n      <Drawer placement=\"left\" onClose={onClose} isOpen={isOpen}>\n        <DrawerOverlay />\n        <DrawerContent\n          bg=\"whiteAlpha.900\"\n          boxShadow=\"xl\"\n          borderRadius=\"lg\"\n          backdropFilter=\"blur(10px)\"\n        >\n          <DrawerHeader borderBottomWidth=\"1px\">Search Users</DrawerHeader>\n          <DrawerBody>\n            <HStack pb={2}>\n              <Input\n                placeholder=\"Search by name or email\"\n                value={search}\n                onChange={(e) => setSearch(e.target.value)}\n                borderRadius=\"full\"\n                focusBorderColor=\"blue.500\"\n              />\n              <Button onClick={handleSearch} colorScheme=\"blue\">\n                Go\n              </Button>\n            </HStack>\n            {loading ? (\n              <ChatLoading />\n            ) : (\n              <VStack spacing={2}>\n                {searchResult?.map((user) => (\n                  <UserListItem\n                    key={user._id}\n                    user={user}\n                    handleFunction={() => accessChat(user._id)}\n                  />\n                ))}\n              </VStack>\n            )}\n            {loadingChat && <Spinner ml=\"auto\" display=\"flex\" />}\n          </DrawerBody>\n        </DrawerContent>\n      </Drawer>\n    </>\n  );\n}\n\nexport default SideDrawer;\n","import { Box } from \"@chakra-ui/layout\";\nimport { useState } from \"react\";\nimport Chatbox from \"../components/Chatbox\";\nimport MyChats from \"../components/MyChats\";\nimport SideDrawer from \"../components/miscellaneous/SideDrawer\";\nimport { ChatState } from \"../Context/ChatProvider\";\n\nconst Chatpage = () => {\n  const [fetchAgain, setFetchAgain] = useState(false);\n  const { user } = ChatState();\n\n  return (\n    <div style={{ width: \"100%\" }}>\n      {user && <SideDrawer />}\n      <Box\n        display=\"flex\"\n        justifyContent=\"space-between\"\n        w=\"100%\"\n        h=\"91.5vh\"\n        p=\"10px\"\n        gap=\"20px\"\n      >\n        {user && <MyChats fetchAgain={fetchAgain} />}\n        {user && (\n          <Chatbox fetchAgain={fetchAgain} setFetchAgain={setFetchAgain} />\n        )}\n      </Box>\n    </div>\n  );\n};\n\nexport default Chatpage;\n","import \"./App.css\";\nimport Homepage from \"./Pages/Homepage\";\nimport { Route } from \"react-router-dom\";\nimport Chatpage from \"./Pages/Chatpage\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Route path=\"/\" component={Homepage} exact />\n      <Route path=\"/chats\" component={Chatpage} />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\nimport { ChakraProvider } from \"@chakra-ui/react\";\nimport ChatProvider from \"./Context/ChatProvider\";\nimport { BrowserRouter } from \"react-router-dom\";\n\nReactDOM.render(\n  <ChakraProvider>\n    <BrowserRouter>\n      <ChatProvider>\n        <App />\n      </ChatProvider>\n    </BrowserRouter>\n  </ChakraProvider>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}